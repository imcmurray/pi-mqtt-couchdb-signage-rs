const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const path = require('path');
const WebSocket = require('ws');
const http = require('http');

const { initializeDatabase } = require('./config/database');
const mqttService = require('./services/mqttService');

// Route imports
const tvRoutes = require('./routes/tvRoutes');
const imageRoutes = require('./routes/imageRoutes');
const dashboardRoutes = require('./routes/dashboardRoutes');

require('dotenv').config();

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Middleware
if (process.env.NODE_ENV === 'production') {
  app.use(helmet());
} else {
  app.use(helmet({
    contentSecurityPolicy: false,
    crossOriginEmbedderPolicy: false // optional for dev if needed
  }));
}

app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Static files
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
app.use('/public', express.static(path.join(__dirname, '../public')));
// Serve CSS and JS files directly from root paths for easier HTML references
app.use('/css', express.static(path.join(__dirname, '../public/css')));
app.use('/js', express.static(path.join(__dirname, '../public/js')));
app.use('/images', express.static(path.join(__dirname, '../public/images')));

// Routes
app.use('/api/tvs', tvRoutes);
app.use('/api/images', imageRoutes);
app.use('/api/dashboard', dashboardRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    mqtt_connected: mqttService.isConnected,
    uptime: process.uptime()
  });
});

// Version endpoint
app.get('/api/version', (req, res) => {
  const fs = require('fs');
  const { execSync } = require('child_process');
  
  try {
    // Read static version info from version.json (generated by git hook)
    let versionInfo;
    try {
      const versionJson = fs.readFileSync(path.join(__dirname, 'version.json'), 'utf8');
      versionInfo = JSON.parse(versionJson);
    } catch (error) {
      console.warn('Could not read version.json, falling back to git commands');
      // Fallback to live git commands if version.json doesn't exist
      const commitHash = execSync('git rev-parse HEAD', { encoding: 'utf8' }).trim();
      const commitShort = execSync('git rev-parse --short HEAD', { encoding: 'utf8' }).trim();
      const branch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf8' }).trim();
      const version = execSync('git describe --tags --always', { encoding: 'utf8' }).trim();
      
      versionInfo = {
        version: version,
        commit_hash: commitHash,
        commit_short: commitShort,
        branch: branch,
        build_time: new Date().toISOString()
      };
    }
    
    // Check for dirty working directory in development
    let isDirty = false;
    if (process.env.NODE_ENV !== 'production') {
      try {
        const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' }).trim();
        isDirty = gitStatus.length > 0;
      } catch (error) {
        // Ignore git errors in development
      }
    }
    
    // Read Management UI version from package.json
    let managementVersion = 'unknown';
    try {
      const packagePath = path.join(__dirname, '../package.json');
      const packageJson = fs.readFileSync(packagePath, 'utf8');
      const packageInfo = JSON.parse(packageJson);
      managementVersion = packageInfo.version;
    } catch (error) {
      console.warn('Could not read package.json version:', error.message);
    }
    
    // Append -dirty suffix if there are uncommitted changes
    const displayVersion = isDirty ? `${versionInfo.version}-dirty` : versionInfo.version;
    
    res.json({
      commit_hash: versionInfo.commit_hash,
      commit_short: versionInfo.commit_short,
      branch: versionInfo.branch,
      build_time: versionInfo.build_time,
      version: displayVersion,
      management_ui_version: managementVersion,
      is_dirty: isDirty
    });
  } catch (error) {
    console.error('Error getting version info:', error);
    res.json({
      commit_hash: 'unknown',
      commit_short: 'unknown',
      branch: 'unknown',
      build_time: new Date().toISOString(),
      version: 'unknown',
      management_ui_version: 'unknown',
      is_dirty: false
    });
  }
});

// Serve admin panel
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

// WebSocket connection handling
wss.on('connection', (ws) => {
  console.log('WebSocket client connected');
  
  const subscriberId = Date.now().toString();
  
  // Subscribe to MQTT updates
  mqttService.addSubscriber(subscriberId, (data) => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'mqtt_update',
        data
      }));
    }
  });

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      console.log('Received WebSocket message:', data);
      
      // Handle different message types
      switch (data.type) {
        case 'ping':
          ws.send(JSON.stringify({ type: 'pong' }));
          break;
        case 'subscribe_tv':
          // Client wants to subscribe to specific TV updates
          break;
        default:
          console.log('Unknown WebSocket message type:', data.type);
      }
    } catch (error) {
      console.error('Error parsing WebSocket message:', error);
    }
  });

  ws.on('close', () => {
    console.log('WebSocket client disconnected');
    mqttService.removeSubscriber(subscriberId);
  });

  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
    mqttService.removeSubscriber(subscriberId);
  });
});

// Error handling middleware
app.use((err, req, res, _next) => {
  console.error('Error:', err);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: 'Not Found' });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  mqttService.disconnect();
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  mqttService.disconnect();
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});

// Start server
async function startServer() {
  try {
    // Initialize database
    await initializeDatabase();
    console.log('Database initialized');

    // Connect to MQTT broker
    try {
      await mqttService.connect();
      console.log('MQTT service connected');
    } catch (error) {
      console.error('MQTT connection failed, continuing without MQTT:', error.message);
    }

    // Start HTTP server
    const PORT = process.env.PORT || 3000;
    server.listen(PORT, '0.0.0.0', () => {
      console.log(`Digital Signage Management Server running on port ${PORT}`);
      console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`WebSocket server running on the same port`);
    });

  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

startServer();
